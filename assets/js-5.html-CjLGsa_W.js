import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as s,d as a,a as t,h as n,o as p,r as o}from"./app-jr6-jCow.js";const h="/strdesign-presentation/assets/image/js-5/what_is_the_javascript.png",d="/strdesign-presentation/assets/image/js-5/%E5%85%A8%E8%83%BD.jpg",c="/strdesign-presentation/assets/image/js-5/%E7%9F%B3%E4%B8%AD%E5%89%91.jpeg",g="/strdesign-presentation/assets/image/js-5/js-strong.png",k="/strdesign-presentation/assets/image/js-5/%E9%9D%99%E7%9A%84%E5%9E%8B%E4%BB%98%E3%81%91.png",m="/strdesign-presentation/assets/image/js-5/typescript.png",y="/strdesign-presentation/assets/image/js-5/typescript2.svg",v={},A={class:"hint-container details"};function u(f,i){const e=o("SandPack");return p(),r("div",null,[i[1]||(i[1]=s('<figure><img src="'+h+'" alt="Alt" width="100%" tabindex="0" loading="lazy"><figcaption></figcaption></figure><div style="display:flex;"><div style="flex:1;"><p>ここまで「JavaScript」に関連する技術を紹介すると、「JavaScriptで何でも作れるんだね」という感想が頭の中に出てくるかと思いますが。</p><p>まるでおとぎ話のように、主人公が最後に越えなければならないのは、「自分自身」のことです。</p><p>「Google V8エンジン」「Node.js」「SPA」「Electron」などの一連の技術は、特定のニーズに応えるための対策として生まれました。<br> 言い換えれば、これらは「強力な武器」と「堅固な鎧」と言えるでしょう。</p></div><div><figure><img src="'+d+'" alt="Alt" width="180" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+c+'" alt="Alt" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div></div><h2 id="💪「javascript」が「強い」or「弱い」" tabindex="-1"><a class="header-anchor" href="#💪「javascript」が「強い」or「弱い」"><span>💪「JavaScript」が「強い」OR「弱い」？</span></a></h2><div style="display:flex;"><div style="flex:1;"><p>この質問が自分に答えるとしたら、私は迷わずに「<mark>弱い</mark>」と答えます。</p></div><div><figure><img src="'+g+`" alt="Alt" width="250" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div></div><h3 id="「javascript」特徴の一つ「弱い型付け」-または動的型付け" tabindex="-1"><a class="header-anchor" href="#「javascript」特徴の一つ「弱い型付け」-または動的型付け"><span>「JavaScript」特徴の一つ「弱い型付け」（または動的型付け）</span></a></h3><div class="hint-container tip"><p class="hint-container-title">動的型付け</p><p>動的型付け（どうてきかたづけ、英: dynamic typing）とは、<br> 変数や関数の引数、返り値などの型が、プログラムの実行中に決まります。<br> コンパイル時（プログラムが実行される前）に型を決める必要がなく、実行時に実際の値に基づいて型が決まるため、柔軟性が高いです。</p><p>例えば、JavaScript や Python では、変数の型を宣言することなく値を代入でき、実行時にその値に応じた型が自動的に決まります。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 42</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// x は数値</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;hello&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// x は文字列に変わる</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>このように、<mark>型を事前に決めず、実行時に決まるのが動的型付けの特徴</mark>です。</p></div><figure><img src="`+k+'" alt="Alt" width="100%" tabindex="0" loading="lazy"><figcaption>動的型付けと静的型付け</figcaption></figure><h3 id="💦動的型付けの弱み" tabindex="-1"><a class="header-anchor" href="#💦動的型付けの弱み"><span>💦動的型付けの弱み</span></a></h3><hr><ul><li><p><strong>🕹実行時エラーの検出は困難</strong><br> 変数の型が実行時に決まるため、型に関連するエラーが実行時に発生することがあります。<br> このようなエラーは、コンパイル時に検出できないため、デバッグが難しくなります。</p></li><li><p><strong>🔐型の安全性が保障されない</strong><br> 型が動的に決まるため、プログラマが意図しない型の不一致が発生することがあり、その結果、型安全性が保証されず、予期しない動作が起こるリスクが高まります。</p></li><li><p><strong>🙉コードの理解と保守の難しさ</strong><br> 動的型付けでは、変数や関数の型が明示的に指定されていないため、コードを読んだり、他の開発者の意図を理解するのが難しくなる場合があります。<br><mark>特に、大規模なプロジェクトでは、コードの可読性や保守性が低下する可能性があります。</mark></p></li></ul>',10)),a(e,{title:"%E5%A4%89%E6%95%B0%E3%81%AE%E5%9E%8B%E3%81%8C%E5%AE%9F%E8%A1%8C%E6%99%82%E3%81%AB%E6%B1%BA%E3%81%BE%E3%82%8B%E4%BE%8B",template:"vue",files:"eJxtj7EOgjAQhl/lcpPGaIURC4nvcYtiiSS0NKWwEBYTF0dXZ5/M8B4WJVAThxvu/u/++69FVpmU7bXeNLXACHmVmlxbqIStdUIql7o0FlowIoMOMlNKIHQs4Y4UqbRUlQVVy6MwAcQDtiAkXDrV10KnBVs35Ox7wXm7xgqpi4MVrgMYanR6Xe799dnfHhHwXOnaQrOW5UkUMeGIEAL7rPFzkMwB2nZK03WcOe2XGYJMTPifCWDlxfYc5/G0x5n3A3ZvTrJzYg==",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="}),i[2]||(i[2]=s(`<hr><ul><li>浮動小数点数の計算に関する問題</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.6</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> y</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.1</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);   </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 結果は？</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3)),t("details",A,[i[0]||(i[0]=t("summary",null,[n("【"),t("strong",null,"検証"),n("】計算式　0.1 + 0.2 = 0.3?")],-1)),a(e,{title:"%E4%BE%8B%EF%BC%92",template:"vue",files:"eJyFj00OgjAUhK/y0q0JlR9daCHxHt0oKZFESlOKG9I7uDbGW7jzPLr0Cj7BIhgTl/Nl5s28htBKp3SllLevBVkQVqU6VwYqYWqVcJkXqtQGGtAiAwuZLgvgBL2cLLnkMi1lZUDWxUZoH2KYejPkQxq01P+i4U8atTRAymg3BCegMKJQu7URqADY1k+a5l1pLUzAqQBV/LowB0bR5dz3y+F2Pj2uR3T2WyeffV3E2lHIHQ1HFZGrCP9WhH0FvtVF+gpGBy8R+wRVWYX1",options:"eJyrrgUAAXUA+Q==",customSetup:"eJyrrgUAAXUA+Q=="})]),i[3]||(i[3]=s('<h3 id="🧰-javascriptとieee-754-標準" tabindex="-1"><a class="header-anchor" href="#🧰-javascriptとieee-754-標準"><span>🧰 JavaScriptとIEEE 754 標準</span></a></h3><div class="hint-container tip"><p class="hint-container-title">IEEE 754 （アイトリプルイーななごおよん）標準</p><p>IEEE 754 標準は浮動小数点数（ふどうしょうすうてんすう）を表現するための二進数のフォーマットで、<br> 十進数の一部の小数（例: 0.1や0.2など）は二進数で正確に表現できません。<br> これらの十進小数を二進数に変換すると無限循環小数になるため、コンピュータは有限の桁数に丸める必要があります。</p></div><p>JavaScript ではIEEE 754 標準に従っています。浮動小数点数は 64 ビットの倍精度（double-precision）フォーマットに整形されます。<br> その結果、<code>0.1 + 0.2</code> のような計算は <code>0.3</code> ではなく、<code>0.30000000000000004</code> になるため、<br><code>false</code> が返されます。</p><ul><li><strong>原因は精度の損失</strong><br><strong>✌🏼二進数の構造</strong>：十進数の「0.1」や「0.2」を二進数で表すと、「0.1」 は <code>0.0001100110011...</code> という無限に続く循環小数になります。このような小数はコンピュータのメモリに収まりきらず、限られたビット数（例えば 64ビット）で切り捨てられ、近似的に保存されます。<br><strong>🎲近似(きんじ)値による誤差</strong>：こうした近似が積み重なると、計算結果にわずかな誤差が生じます。<br> 例えば <code>0.1 + 0.2</code> の結果が正確に 0.3 にならず、<code>0.30000000000000004</code> になるのも、この誤差が原因です。 0.5 は二進数で 0.1 と表せます。このように、二進数では有限小数であり、浮動小数点数のビットで完全に表現できるため、精度の損失はありません。</li></ul><h2 id="typescriptの誕生" tabindex="-1"><a class="header-anchor" href="#typescriptの誕生"><span>TypeScriptの誕生</span></a></h2><div style="display:flex;"><div style="flex:1;"><ul><li><strong>Microsoft</strong>が2012年に開発し、<strong>オープンソース</strong>で公開した。</li><li>JavaScriptの<strong>スーパーセット</strong>となるプログラミング言語。</li><li><strong>静的型付け言語</strong>であり、プログラムの正しさが静的に検査できる。</li></ul></div><div><figure><img src="'+m+'" alt="Alt" width="200" tabindex="0" loading="lazy"><figcaption></figcaption></figure></div></div><figure><img src="'+y+'" alt="Alt" width="100%" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="🎖-typescriptのメリット" tabindex="-1"><a class="header-anchor" href="#🎖-typescriptのメリット"><span>🎖 TypeScriptのメリット</span></a></h2><h3 id="🎯静的な検査" tabindex="-1"><a class="header-anchor" href="#🎯静的な検査"><span>🎯静的な検査</span></a></h3><ul><li><strong>TypeScriptはプログラムの正しさを静的に検査できる。</strong></li><li><strong>JavaScriptは実行しないとバグがあるかを確かめられない。</strong></li><li><strong>TypeScriptは実行せずにチェックが行える。</strong></li><li><strong>TypeScriptはプログラムの正しさを静的に検査できる。</strong></li></ul><h3 id="📈開発効率と品質を向上し、安心感を高める" tabindex="-1"><a class="header-anchor" href="#📈開発効率と品質を向上し、安心感を高める"><span>📈開発効率と品質を向上し、安心感を高める</span></a></h3><ul><li><strong>問題を早期に発見し、開発を効率化できる。</strong></li><li><strong>エディターとTypeScriptを連携させると、リアルタイムのチェックやコードヒントができる。</strong></li><li></li></ul>',12))])}const j=l(v,[["render",u],["__file","js-5.html.vue"]]),b=JSON.parse('{"path":"/javascript/js-5.html","title":"第五戦 自分自身との戦い","lang":"ja-JP","frontmatter":{"title":"第五戦 自分自身との戦い","icon":"rocket","navbar":false,"sidebar":false,"editLink":false,"lastUpdated":false,"pageInfo":false,"toc":false,"comment":false,"prev":"/javascript/js-4","next":"/javascript/js-6","order":5,"description":"Alt ここまで「JavaScript」に関連する技術を紹介すると、「JavaScriptで何でも作れるんだね」という感想が頭の中に出てくるかと思いますが。 まるでおとぎ話のように、主人公が最後に越えなければならないのは、「自分自身」のことです。 「Google V8エンジン」「Node.js」「SPA」「Electron」などの一連の技術は、特定のニ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/javascript/js-5.html"}],["meta",{"property":"og:title","content":"第五戦 自分自身との戦い"}],["meta",{"property":"og:description","content":"Alt ここまで「JavaScript」に関連する技術を紹介すると、「JavaScriptで何でも作れるんだね」という感想が頭の中に出てくるかと思いますが。 まるでおとぎ話のように、主人公が最後に越えなければならないのは、「自分自身」のことです。 「Google V8エンジン」「Node.js」「SPA」「Electron」などの一連の技術は、特定のニ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/assets/image/js-5/what_is_the_javascript.png \\" \\" =100%x"}],["meta",{"property":"og:locale","content":"ja-JP"}],["meta",{"property":"og:updated_time","content":"2024-11-08T09:12:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-08T09:12:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"第五戦 自分自身との戦い\\",\\"image\\":[\\"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/assets/image/js-5/what_is_the_javascript.png \\\\\\" \\\\\\" =100%x\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/assets/image/js-5/全能.jpg \\\\\\" \\\\\\" =180x\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/assets/image/js-5/石中剑.jpeg \\\\\\" \\\\\\" =200x\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/assets/image/js-5/js-strong.png \\\\\\" \\\\\\" =250x\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/assets/image/js-5/静的型付け.png \\\\\\"動的型付けと静的型付け\\\\\\" =100%x\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/assets/image/js-5/typescript.png \\\\\\" \\\\\\" =200x\\",\\"https://vuepress-theme-hope-docs-demo.netlify.app/strdesign-presentation/assets/image/js-5/typescript2.svg \\\\\\" \\\\\\" =100%x\\"],\\"dateModified\\":\\"2024-11-08T09:12:46.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.meng\\",\\"url\\":\\"\\"}]}"]]},"headers":[{"level":2,"title":"💪「JavaScript」が「強い」OR「弱い」？","slug":"💪「javascript」が「強い」or「弱い」","link":"#💪「javascript」が「強い」or「弱い」","children":[{"level":3,"title":"「JavaScript」特徴の一つ「弱い型付け」（または動的型付け）","slug":"「javascript」特徴の一つ「弱い型付け」-または動的型付け","link":"#「javascript」特徴の一つ「弱い型付け」-または動的型付け","children":[]},{"level":3,"title":"💦動的型付けの弱み","slug":"💦動的型付けの弱み","link":"#💦動的型付けの弱み","children":[]},{"level":3,"title":"🧰 JavaScriptとIEEE 754 標準","slug":"🧰-javascriptとieee-754-標準","link":"#🧰-javascriptとieee-754-標準","children":[]}]},{"level":2,"title":"TypeScriptの誕生","slug":"typescriptの誕生","link":"#typescriptの誕生","children":[]},{"level":2,"title":"🎖 TypeScriptのメリット","slug":"🎖-typescriptのメリット","link":"#🎖-typescriptのメリット","children":[{"level":3,"title":"🎯静的な検査","slug":"🎯静的な検査","link":"#🎯静的な検査","children":[]},{"level":3,"title":"📈開発効率と品質を向上し、安心感を高める","slug":"📈開発効率と品質を向上し、安心感を高める","link":"#📈開発効率と品質を向上し、安心感を高める","children":[]}]}],"git":{"createdTime":1731008291000,"updatedTime":1731057166000,"contributors":[{"name":"MENG-strdesign","email":"meng@strdesign.ac","commits":1},{"name":"孟　瀚博","email":"meng@strdesign.ac","commits":1}]},"readingTime":{"minutes":2.71,"words":812},"filePathRelative":"javascript/js-5.md","localizedDate":"2024年11月7日","autoDesc":true}');export{j as comp,b as data};
